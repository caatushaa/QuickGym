import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()
db = Database("fitness_bot.db")


# States –¥–ª—è FSM
class Registration(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()


class Booking(StatesGroup):
    choosing_training = State()
    choosing_time = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if not db.user_exists(user_id):
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(Registration.waiting_for_name)
    else:
        await show_main_menu(message)


@dp.message(Registration.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Registration.waiting_for_phone)


@dp.message(Registration.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    db.add_user(
        user_id=message.from_user.id,
        name=user_data['name'],
        phone=message.text,
        username=message.from_user.username
    )

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await show_main_menu(message)
    await state.clear()


async def show_main_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
            [types.KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏"),
             types.KeyboardButton(text="‚ùì FAQ")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message(lambda message: message.text and "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" in message.text)
async def show_trainings(message: types.Message, state: FSMContext):
    trainings = db.get_available_trainings()

    if not trainings:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        return

    keyboard = types.InlineKeyboardMarkup()
    for training in trainings:
        keyboard.add(types.InlineKeyboardButton(
            text=f"{training['name']} - {training['time']}",
            callback_data=f"training_{training['id']}"
        ))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:", reply_markup=keyboard)
    await state.set_state(Booking.choosing_training)


@dp.callback_query(Booking.choosing_training)
async def process_training_selection(callback: types.CallbackQuery, state: FSMContext):
    training_id = int(callback.data.split("_")[1])
    await state.update_data(training_id=training_id)

    dates = db.get_available_dates(training_id)
    keyboard = types.InlineKeyboardMarkup()
    for date in dates:
        keyboard.add(types.InlineKeyboardButton(
            text=date['date_str'],
            callback_data=f"date_{date['id']}"
        ))

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)
    await state.set_state(Booking.choosing_time)


@dp.callback_query(Booking.choosing_time)
async def process_date_selection(callback: types.CallbackQuery, state: FSMContext):
    schedule_id = int(callback.data.split("_")[1])
    user_data = await state.get_data()

    if db.create_booking(callback.from_user.id, schedule_id):
        await callback.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, –º–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")

    await state.clear()


@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def show_user_bookings(message: types.Message):
    bookings = db.get_user_bookings(message.from_user.id)

    if not bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return

    text = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
    for booking in bookings:
        text += f"üìÖ {booking['training_name']}\n"
        text += f"‚è∞ {booking['date']}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {booking['status']}\n\n"

    await message.answer(text)


@dp.message(lambda message: message.text == "‚ùì FAQ")
async def show_faq(message: types.Message):
    faq_text = """
ü§î –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

‚ùì –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?
‚û° –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @username

‚ùì –ß—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?
‚û° –£–¥–æ–±–Ω—É—é —Ñ–æ—Ä–º—É, –≤–æ–¥—É –∏ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!

‚ùì –ï—Å—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ?
‚û° –î–∞, –ø–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
    """
    await message.answer(faq_text)

async def main():
    logging.info("Starting fitness bot...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Bot crashed: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
