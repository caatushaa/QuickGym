import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()
db = Database("fitness_bot.db")

# States –¥–ª—è FSM
class Registration(StatesGroup):
    waiting_for_agreement = State()
    waiting_for_phone = State()
    waiting_for_age_confirmation = State()

class Booking(StatesGroup):
    choosing_training = State()
    choosing_time = State()

# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
AGREEMENT_TEXT = """
üìã <b>–°–û–ì–õ–ê–°–ò–ï –ù–ê –û–ë–†–ê–ë–û–¢–ö–£ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•</b>

–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:

‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏

<b>–¢–∞–∫–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤–∞–º –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 16 –ª–µ—Ç</b> - —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.

‚úÖ <b>–ù–∞–∂–∏–º–∞—è "–ü—Ä–∏–Ω—è—Ç—å", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏</b>
"""

# –ê–∫–∫–∞—É–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
DEVELOPERS = """
üë®‚Äçüíª <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏</b>

–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:
‚Ä¢ @username1 - –≥–ª–∞–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
‚Ä¢ @username2 - —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤:
‚Ä¢ @fitnesmanager - –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª—É–±–∞
"""

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –° –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–º
def get_main_menu_with_subscription():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"))
    builder.add(KeyboardButton(text="üë®‚Äçüè´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤"))
    builder.add(KeyboardButton(text="üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"))
    builder.add(KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ"))
    builder.add(KeyboardButton(text="üé´ –ú–æ–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã"))
    builder.add(KeyboardButton(text="üë®‚Äçüíº –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"))
    builder.add(KeyboardButton(text="üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"))
    builder.adjust(2, 2, 2, 1)
    return builder.as_markup(resize_keyboard=True)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–ï–ó –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
def get_main_menu_without_subscription():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üéØ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"))
    builder.add(KeyboardButton(text="üë®‚Äçüè´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤"))
    builder.add(KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"))
    builder.add(KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ"))
    builder.add(KeyboardButton(text="üë®‚Äçüíº –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"))
    builder.add(KeyboardButton(text="üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"))
    builder.adjust(2, 2, 2)
    return builder.as_markup(resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def get_phone_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)
        ]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    if not db.user_exists(user_id):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
        await message.answer(
            AGREEMENT_TEXT,
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        await state.set_state(Registration.waiting_for_agreement)
    else:
        await show_main_menu(message)

@dp.message(Registration.waiting_for_agreement, F.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
async def process_agreement(message: types.Message, state: FSMContext):
    await message.answer(
        "üìû –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=get_phone_keyboard()
    )
    await state.set_state(Registration.waiting_for_phone)

@dp.message(Registration.waiting_for_phone, F.contact)
async def process_phone_contact(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_user(
        user_id=message.from_user.id,
        name=message.from_user.full_name,
        phone=phone_number,
        username=message.from_user.username
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
    db.create_trial_subscription(message.from_user.id)
    
    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–æ–±–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    await show_main_menu(message)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–º)
@dp.message(F.text == "üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def show_trainings_with_subscription(message: types.Message, state: FSMContext):
    subscription = db.get_user_subscription(message.from_user.id)
    
    if not subscription or subscription['sessions_left'] <= 0:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–Ω—è—Ç–∏—è.")
        return
    
    trainings = db.get_available_trainings()
    
    if not trainings:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        return
    
    buttons = []
    for training in trainings:
        buttons.append([types.InlineKeyboardButton(
            text=f"{training['name']} - {training['time']}",
            callback_data=f"training_{training['id']}"
        )])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:", reply_markup=keyboard)
    await state.set_state(Booking.choosing_training)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
@dp.message(F.text == "üéØ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def show_trial_trainings(message: types.Message, state: FSMContext):
    subscription = db.get_user_subscription(message.from_user.id)
    
    if not subscription or subscription['type'] != 'trial' or subscription['sessions_left'] <= 0:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–±–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return
    
    trainings = db.get_available_trainings()
    
    if not trainings:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏")
        return
    
    buttons = []
    for training in trainings:
        buttons.append([types.InlineKeyboardButton(
            text=f"{training['name']} - {training['time']}",
            callback_data=f"training_{training['id']}"
        )])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(Booking.choosing_training)

@dp.callback_query(Booking.choosing_training)
async def process_training_selection(callback: types.CallbackQuery, state: FSMContext):
    training_id = int(callback.data.split("_")[1])
    await state.update_data(training_id=training_id)
    
    dates = db.get_available_dates(training_id)
    
    if not dates:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        await state.clear()
        return
    
    buttons = []
    for date in dates:
        buttons.append([types.InlineKeyboardButton(
            text=date['date_str'],
            callback_data=f"date_{date['id']}"
        )])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)
    await state.set_state(Booking.choosing_time)

@dp.callback_query(Booking.choosing_time)
async def process_date_selection(callback: types.CallbackQuery, state: FSMContext):
    schedule_id = int(callback.data.split("_")[1])
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç–∏–µ
    subscription = db.get_user_subscription(callback.from_user.id)
    if not subscription or subscription['sessions_left'] <= 0:
        await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.")
        await state.clear()
        return
    
    if db.create_booking(callback.from_user.id, schedule_id):
        # –°–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ
        db.update_subscription_sessions(callback.from_user.id)
        
        remaining = subscription['sessions_left'] - 1
        await callback.message.edit_text(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n"
            f"üé´ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {remaining}"
        )
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, –º–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã"
@dp.message(F.text == "üé´ –ú–æ–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
async def show_subscriptions(message: types.Message):
    subscription = db.get_user_subscription(message.from_user.id)
    
    if not subscription:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.")
        return
    
    sub_type = "–ü—Ä–µ–º–∏—É–º" if subscription['type'] == 'premium' else "–ü—Ä–æ–±–Ω—ã–π"
    text = (
        f"üé´ <b>–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç</b>\n"
        f"–¢–∏–ø: {sub_type}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {subscription['sessions_left']}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription['expires_at'][:10]}"
    )
    await message.answer(text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"
@dp.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç")
async def show_buy_subscription(message: types.Message):
    text = (
        "üí≥ <b>–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞</b>\n\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n"
        "@fitnesmanager\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
        "‚Ä¢ –ü—Ä–æ–±–Ω—ã–π - 1 –∑–∞–Ω—è—Ç–∏–µ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
        "‚Ä¢ –ë–∞–∑–æ–≤—ã–π - 4 –∑–∞–Ω—è—Ç–∏—è\n"
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º - 8 –∑–∞–Ω—è—Ç–∏–π\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π - –Ω–∞ –º–µ—Å—è—Ü"
    )
    await message.answer(text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
@dp.message(F.text == "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def show_developers(message: types.Message):
    await message.answer(DEVELOPERS, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
@dp.message(F.text == "üë®‚Äçüíº –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def contact_manager(message: types.Message):
    await message.answer(
        "üë®‚Äçüíº <b>–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n"
        "@fitnesmanager\n\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00-21:00)",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤"
@dp.message(F.text == "üë®‚Äçüè´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤")
async def show_trainers(message: types.Message):
    trainers_text = (
        "üë®‚Äçüè´ <b>–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤</b>\n\n"
        "‚Ä¢ <b>–ê–Ω–Ω–∞</b> - –ô–æ–≥–∞, –°—Ç—Ä–µ—Ç—á–∏–Ω–≥\n"
        "  –û–ø—ã—Ç: 5 –ª–µ—Ç\n\n"
        "‚Ä¢ <b>–ú–∞–∫—Å–∏–º</b> - –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥\n"
        "  –û–ø—ã—Ç: 7 –ª–µ—Ç\n\n"
        "‚Ä¢ <b>–ú–∞—Ä–∏—è</b> - –ü–∏–ª–∞—Ç–µ—Å, –ö–∞–ª–ª–∞–Ω–µ—Ç–∏–∫–∞\n"
        "  –û–ø—ã—Ç: 4 –≥–æ–¥–∞\n\n"
        "–í—Å–µ —Ç—Ä–µ–Ω–µ—Ä—ã –∏–º–µ—é—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏—Ç–Ω–µ—Å–∞."
    )
    await message.answer(trainers_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ"
@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ")
async def show_club_info(message: types.Message):
    club_info = (
        "üèãÔ∏è <b>–§–∏—Ç–Ω–µ—Å-–∫–ª—É–± QuickGym</b>\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123\n"
        "üïí <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> 7:00-23:00\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (495) 123-45-67\n\n"
        "<b>–û—Å–Ω–∞—â–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã\n"
        "‚Ä¢ –ó–∞–ª –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π\n"
        "‚Ä¢ –ö–∞—Ä–¥–∏–æ-–∑–æ–Ω–∞\n"
        "‚Ä¢ –†–∞–∑–¥–µ–≤–∞–ª–∫–∏ —Å –¥—É—à–µ–≤—ã–º–∏\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π Wi-Fi\n\n"
        "–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ 5 –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –º–µ—Ç—Ä–æ ¬´–ü—Ä–∏–º–µ—Ä–Ω–∞—è¬ª"
    )
    await message.answer(club_info, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
@dp.message(F.text == "üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
async def show_user_bookings(message: types.Message):
    bookings = db.get_user_bookings(message.from_user.id)
    
    if not bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        return
    
    text = "üìã <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n"
    for booking in bookings:
        status_emoji = "‚úÖ" if booking['status'] == 'active' else "‚ùå"
        text += f"{status_emoji} <b>{booking['training_name']}</b>\n"
        text += f"   ‚è∞ {booking['date']}\n"
        text += f"   –°—Ç–∞—Ç—É—Å: {booking['status']}\n\n"
    
    await message.answer(text, parse_mode='HTML')

async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞"""
    subscription = db.get_user_subscription(message.from_user.id)
    
    if subscription and subscription['sessions_left'] > 0:
        await message.answer(
            "üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_with_subscription()
        )
    else:
        await message.answer(
            "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ–±–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=get_main_menu_without_subscription()
        )

async def main():
    logging.info("Starting fitness bot...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Bot crashed: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
